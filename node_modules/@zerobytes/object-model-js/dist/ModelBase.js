"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _firebaseBasicService = require("@zerobytes/firebase-basic-service");

var _PlainObject2 = _interopRequireDefault(require("./PlainObject"));

var _FieldTypes = _interopRequireDefault(require("./FieldTypes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Holds a standard functional object which can be validated automatically
 */
var ModelBase =
/*#__PURE__*/
function (_PlainObject) {
  _inherits(ModelBase, _PlainObject);

  /**
   * @param {string} modelName collection at firestore
   * @param {object} data Object containing the property values of this model
   */
  function ModelBase(modelName, data) {
    var _this;

    _classCallCheck(this, ModelBase);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModelBase).call(this, data));
    var _modelName = modelName;

    _this.getModelName = function () {
      return _modelName;
    };

    return _this;
  }

  return ModelBase;
}(_PlainObject2["default"]);
/**
 * Returns an instance of BasicService which gives access to several methods
 * regarding firebase.firestore actions.
 * save/patch/get/list/filter/order/limit
 */


ModelBase.prototype.getService = function (firebase, store, reducerName) {
  var _this2 = this;

  var defaultObject = {};
  Object.keys(this.$fieldConfig).map(function (property) {
    var field = _this2.$fieldConfig[property];

    switch (field.type) {
      case _FieldTypes["default"].Boolean:
        defaultObject[property] = field.defaultValue;
        break;

      default:
        defaultObject[property] = field.defaultValue || '';
        break;
    }
  });
  return (0, _firebaseBasicService.BasicService)({
    firebase: firebase,
    collection: this.getModelName(),
    defaultObject: defaultObject,
    store: store,
    reducerName: reducerName || this.getModelName()
  });
};

var _default = ModelBase;
exports["default"] = _default;