"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Can have a simpler object filled by a "data" object, by means of $fill method
 */
var PlainObject = function PlainObject(data) {
  _classCallCheck(this, PlainObject);

  this.$fill(data);
};

PlainObject.prototype.$fieldConfig = {};
/**
 * Applies an object filling based on passed data
 * @param {object} data object contaning the default properties of this model, and its values
 */

PlainObject.prototype.$fill = function () {
  var _this = this;

  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  data = data instanceof Object ? data : {};

  if (data.uid) {
    this.uid = data.uid;
  }

  if (data.createdAt) {
    this.createdAt = data.createdAt;
  }

  if (data.createdBy) {
    this.createdBy = data.createdBy;
  }

  if (data.deleted !== undefined) {
    this.deleted = data.deleted;
  } //Creates all the public properties for this object
  //based on the $fieldConfig


  Object.keys(this.$fieldConfig).map(function (property) {
    var field = _this.$fieldConfig[property];
    _this[property] = data[property];

    if (typeof data[property] !== 'boolean' && isNaN(data[property]) && !data[property]) {
      _this[property] = field.defaultValue;

      if (!field.defaultValue && typeof field.defaultValue !== 'boolean' && isNaN(field.defaultValue)) {
        _this[property] = '';
      }
    }
  });
  return this;
};
/**
 * Returns a plain object based on the $fieldConfig properties
 */


PlainObject.prototype.$toPlainObject = function () {
  var _this2 = this;

  var plain = {};

  if (this.uid) {
    plain.uid = this.uid;
  }

  if (this.deleted !== undefined) {
    plain.deleted = this.deleted;
  }

  if (this.createdAt) {
    plain.createdAt = this.createdAt;
  }

  if (this.createdBy) {
    plain.createdBy = this.createdBy;
  }

  Object.keys(this.$fieldConfig).map(function (property) {
    plain[property] = _this2[property];
  });
  return plain;
};
/**
 * Validates each field of this model,
 * according to their own validation method
 */


PlainObject.prototype.$validate = function () {
  var _this3 = this;

  var errors = {};
  Object.keys(this.$fieldConfig).find(function (property) {
    var field = _this3.$fieldConfig[property];
    var validation = field.validate();

    if (validation.length) {
      errors[property] = validation;
    }
  });
  return errors;
};

var _default = PlainObject;
exports["default"] = _default;