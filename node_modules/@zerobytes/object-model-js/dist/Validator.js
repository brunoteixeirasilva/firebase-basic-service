"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _FieldTypes = _interopRequireWildcard(require("./FieldTypes"));

var _ModelBase = _interopRequireDefault(require("./ModelBase"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Validates if a given value is of a given type
 * Types can be a Shape, an Array of any or an InstanceOf
 * @param {FieldType} typeDef
 * @param {any} value
 */
var validateObjectType = function validateObjectType(typeDef, value) {
  if (!(typeDef instanceof _FieldTypes.FieldType) || value === null || value === undefined) {
    return true;
  }

  var valid = true;

  switch (typeDef.complexType) {
    case _FieldTypes.ComplexTypes.IdOf:
      if (value === null || value === undefined || value === '') return valid;
      return typeof value === 'string';

    case _FieldTypes.ComplexTypes.ShapedAs:
      if (_typeof(value) !== 'object') return false;
      Object.keys(new typeDef.Type()).find(function (prop) {
        if (prop === '$fieldConfig') return;
        valid = value.hasOwnProperty(prop);
        if (!valid) return prop;
      });
      return valid;

    case _FieldTypes.ComplexTypes.ArrayOf:
      if (!(value instanceof Array)) return false;
      value.find(function (item) {
        if (typeDef.Type instanceof _FieldTypes.FieldType) {
          valid = validateObjectType(typeDef.Type, item);
        } else if (typeof typeDef.Type === 'function' && typeDef.Type.name !== 'Object' && new typeDef.Type() instanceof _ModelBase["default"]) {
          if (_typeof(item) !== 'object') {
            valid = false;
            return item;
          } else {
            valid = true;
            return;
          } //TODO: unreachable code here


          var oType = new typeDef.Type();
          Object.keys(oType).find(function (prop) {
            if (prop === '$fieldConfig') return;
            if (typeof oType[prop] === 'function') return;
            valid = item.hasOwnProperty(prop);
            if (!valid) return prop;
          });
          if (!valid) return item;
        } else if (typeof typeDef.Type === 'function') {
          valid = item instanceof typeDef.Type;
        } else {
          valid = validateType(typeDef.Type, item);
        }

        if (!valid) return item;
      });
      return valid;

    case _FieldTypes.ComplexTypes.InstanceOf:
      return value instanceof typeDef.Type;
  }
};
/**
 * Checks if a given value is of a given type
 * @param {string|FieldType} type Can be a String or a FieldType
 * @param {any} value the value to be validated as one of the type defined
 */


var validateType = function validateType(type, value) {
  var valid = true;

  switch (type) {
    case _FieldTypes["default"].String:
      valid = typeof value === 'string';
      break;

    case _FieldTypes["default"].Integer:
      valid = !Number.isNaN(value);
      break;

    case _FieldTypes["default"].Float:
      valid = !Number.isNaN(value);
      break;

    case _FieldTypes["default"].Array:
      valid = value instanceof Array;
      break;

    case _FieldTypes["default"].Datetime:
      valid = value instanceof Date;
      break;

    case _FieldTypes["default"].Date:
      valid = value instanceof Date;
      break;

    case _FieldTypes["default"].Time:
      valid = value instanceof Date;
      break;

    case _FieldTypes["default"].Boolean:
      valid = typeof value === 'boolean';
      break;

    default:
      if (type instanceof _FieldTypes.FieldType) {
        valid = validateObjectType(type, value);
      }

      break;
  }

  return valid;
};

var _default = function _default(model, property) {
  var value = model[property];
  var config = model.$fieldConfig[property];
  var valid = true;
  var validator;
  var errors = [];

  var addError = function addError(error) {
    errors.push(error);
  };
  /**
   * checks if the field value is of the type configured at the model
   */


  var isOfType = function isOfType() {
    valid = validateType(config.type, value);
    if (!valid) addError('wrong-type');
    return validator;
  };
  /**
   * needs to be a valid email
   * can be empty
   */


  var email = function email() {
    if (!valid || !value) return validator;
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    valid = !!re.test(value.toLowerCase());
    if (!valid) addError('invalid-email');
    return validator;
  };

  var website = function website() {
    if (!valid || !value) return validator;
    var pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
    '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
    '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
    '(\\#[-a-z\\d_]*)?$', 'i');
    valid = !!pattern.test(value);
    if (!valid) addError('invalid-website');
    return validator;
  };
  /**
   * maximum size of the string/array
   */


  var maxLength = function maxLength() {
    if (!valid || !value) return validator;
    if (value && value.length > config.maxLength) valid = false;
    if (!valid) addError('beyond-max-length');
    return validator;
  };
  /**
   * minimum size of the string/array
   */


  var minLength = function minLength() {
    if (!valid || !value) return validator;
    if (value.length < config.minLength) valid = false;
    if (!valid) addError('bellow-min-length');
    return validator;
  };
  /**
   * can not be empty
   * can be null
   */


  var notEmpty = function notEmpty() {
    if (!valid) return validator;
    if (value === null || value === undefined) return validator;

    if (config.type === _FieldTypes["default"].Array) {
      if (!(value instanceof Array)) {
        return validator;
      }

      valid = value.length > 0;
    } else if (config.type instanceof _FieldTypes.FieldType) {
      if (config.type.complexType === _FieldTypes.ComplexTypes.ShapedAs) {}
    } else {
      if (value.toString().trim() === '') {
        valid = false;
      }
    }

    if (!valid) addError('empty');
    return validator;
  };
  /**
   * can not be null
   * can be empty
   */


  var notNull = function notNull() {
    if (!valid) return validator;

    if ((value === null || value === undefined) && value !== '') {
      valid = false;
    }

    if (!valid) addError('null');
    return validator;
  };
  /**
   * needs to be LESS than specified,
   * **not even equal**
   *
   * @param {number} thresholdValue cut-off limit to this function
   */


  var lessThan = function lessThan(thresholdValue) {
    if (!valid) return validator;

    if (value >= thresholdValue) {
      valid = false;
    }

    if (!valid) addError('more-than-or-equal-to-maximum');
    return validator;
  };
  /**
   * needs to be MORE than specified,
   * **not even equal**
   *
   * @param {number} thresholdValue cut-off limit to this function
   */


  var moreThan = function moreThan(thresholdValue) {
    if (!valid) return validator;

    if (value <= thresholdValue) {
      valid = false;
    }

    if (!valid) addError('less-than-or-equal-to-minimum');
    return validator;
  };
  /**
   * needs to be more than zero
   */


  var moreThanZero = function moreThanZero() {
    if (!valid) return validator;

    if (value <= 0) {
      valid = false;
    }

    if (!valid) addError('zero-or-less');
    return validator;
  };

  var isValid = function isValid() {
    return errors;
  };

  validator = {
    isOfType: isOfType,
    email: email,
    website: website,
    maxLength: maxLength,
    minLength: minLength,
    notEmpty: notEmpty,
    notNull: notNull,
    isValid: isValid,
    lessThan: lessThan,
    moreThan: moreThan,
    moreThanZero: moreThanZero
  };
  return validator;
};

exports["default"] = _default;